generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  userId      String?   @unique
  password    String
  username    String    @unique
  nickName    String?
  createdTime DateTime  @default(now())
  updatedTime DateTime  @updatedAt
  addresses   Address[]
  cart        Cart?
  orders      Order[]
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [userId])
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  productId String  @unique
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
}

model Product {
  id           Int          @id @default(autoincrement())
  productId    String       @unique @default(uuid())
  title        String
  brand        Brand        @relation(fields: [brandId], references: [brandId])
  brandId      String
  catalogId    String?
  subCatalogId String
  desc         String @db.Text
  details      String @db.Text
  stock        Int
  imgUrls      String @db.Text
  ref          String @db.Text
  createTime   DateTime     @default(now())
  updateTime   DateTime     @updatedAt
  productSkuIds String
  price Float
}

model ProductSku {
  id        Int     @id @default(autoincrement())
  text      String
  skuIds    String
}

model Sku {
  id         Int          @id @default(autoincrement())
  text       String
}

model Brand {
  id        Int       @id @default(autoincrement())
  brandId   String    @unique @default(uuid())
  brandName String
  logo String?
  products  Product[]
}

model Catalog {
  id          Int          @id @default(autoincrement())
  catalogId   String       @unique @default(uuid())
  name        String
  imgUrl String?
}

model SubCatalog {
  id           Int       @id @default(autoincrement())
  subCatalogId String    @unique @default(uuid())
  catalogId    String
  name         String
  imgUrl String?
}

model Address {
  id     Int     @id @default(autoincrement())
  name   String
  phone  String
  state  String
  city   String
  street String
  user   User    @relation(fields: [userId], references: [userId])
  userId String
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber String      @unique @default(uuid())
  createdTime DateTime?    @default(now())
  updatedTime DateTime?    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [userId])
  addressId   Int
  orderItems  OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  quantity    Int
  productId   String
  orderNumber String
  order       Order   @relation(fields: [orderNumber], references: [orderNumber])
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}
